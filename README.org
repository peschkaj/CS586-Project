#+TITLE: CS586 Graduate Project Final Write Up
#+AUTHOR: Jeremiah Peschka
#+EMAIL: jeremiah.peschka@gmail.com
#+STARTUP: indent showall
#+OPTIONS: documentclass[11pt,letterpaper]{report}
#+LATEX_HEADER_EXTRA: \usepackage{amsmath,amssymb,amsthm,enumerate,parskip,fancyvrb,tikz-er2,fancyhdr}
#+LATEX_HEADER_EXTRA: \pagestyle{fancy}
#+LATEX_HEADER_EXTRA: \fancyhead{}
#+LATEX_HEADER_EXTRA: \lhead{CS586}
#+LATEX_HEADER_EXTRA: \chead{Homework 7}
#+LATEX_HEADER_EXTRA: \rhead{Jeremiah Peschka}
#+OPTIONS: num:nil
#+OPTIONS: ^:{}

The canonical version of this document is available at [[https://github.com/peschkaj/CS586-Project/blob/master/README.org][https://github.com/peschkaj/CS586-Project/blob/master/README.org]]


** ER Diagram

[[file:grad-erd.png]]

** Table Creation Scripts

Table create scripts are located in the initial portion of [[https://github.com/peschkaj/CS586-Project/blob/master/data-load.sql][data-load.sql]].

** Data Load Process

Source data is available in the [[https://github.com/peschkaj/CS586-Project/blob/master/IMDB-Halloween-PromptCloud.csv][IMDB-Halloween-PromptCloud.csv]] file.

The database was populated as follows:

1. Data is loaded into a staging table using the ~copy~ command.
2. The release year is extracted from either the release date column or from
   parsing the movie title. If this title is only 4 characters long, we can
   assume it's a single year. Otherwise, we parse it as a date and extract the
   year.
3. The locations, genres, countries, and actors tables are populated by reading
   from the ~imdb_staging~ table and parsing the pipe delimited string that
   contains data for each respective column.
4. The ratings column is entered from a hand written ~INSERT~ statement. My
   original goal was to put the list in ascending of "naughtiness" (for lack of
   a better word). This did not happen and, in hindsight, I should have used a
   ~SELECT~ statement.
5. At this point movies are loaded from the staging and then movies are
   connected to the locations, genres, countries, and actors tables by a series
   of join tables.
6. Budget data is cleaned and separated into a currency unit and a currency.
   Then the currencies are normalized to 2017 USD. No effort is made to apply
   inflation, though.

** Questions

Each question is linked to the relevant SQL query and the "Results" text links
to a text file containing the results.

1. [[file:queries/01.sql][Highest budget movie by year by country]] - [[file:results/01.txt][Results]]
2. [[queries/02.sql][Highest budget movie by release year]] - [[file:results/02.txt][Results]]
3. [[file:queries/03.sql][Highest budget movie by country]] - [[file:results/03.txt][Results]]
4. [[file:queries/04.sql][Number of movies released per year]] - [[file:results/04.txt][Results]]
5. [[file:queries/05.sql][Number of movies released by country]] - [[file:results/05.txt][Results]]
6. [[file:queries/06.sql][Number of movies released by country by year]] - [[file:results/06.txt][Results]]
7. [[queries/07.sql][Number of movies filmed in each country]] - [[file:results/07.txt][Results]]
8. [[file:queries/08.sql][Number of movies filmed in a specific location in each country]] - [[file:results/08.txt][Results]]
9. [[file:queries/09.sql][Locations where only one movie was filmed]] - [[file:results/09.txt][Results]]
10. [[file:queries/10.sql][Movies filmed in each country by year]] - [[file:results/10.txt][Results]]
11. [[file:queries/11.sql][Average IMDB score by release date]] - [[file:results/11.txt][Results]]
12. [[file:queries/12.sql][Average IMDB score by country of origin]] - [[file:results/12.txt][Results]]
13. [[file:queries/13.sql][Average IMDB score by country of origin and release year]] - [[file:results/13.txt][Results]]
14. [[file:queries/14.sql][Average IMDB score by runtime]] - [[file:results/14.txt][Results]]
15. [[file:queries/15.sql][Most common movie rating by country of origin]] - [[file:results/15.txt][Results]]
16. [[file:queries/16.sql][Most common movie rating by country of origin and release year]] - [[file:results/16.txt][Results]]
17. [[file:queries/17.sql][Most common movie rating by release year]] - [[file:results/17.txt][Results]]
18. [[file:queries/18.sql][Number of movies by genre (excluding horror)]] - [[file:results/18.txt][Results]]
19. [[file:queries/19.sql][Number of movies by genre per year (excluding horror)]] - [[file:results/19.txt][Results]]
20. [[file:queries/20.sql][Total and average budget spent by genre (excluding horror)]] - [[file:results/20.txt][Results]]

/N.B./ Since this is a list of horror movies, the "horror" genre is excluded from all
genre-related questions to avoid skewing the data.

*** Deleted questions:

The original list of questions had to be revised significantly. The IMDB data
that I ended up using did not contain box office gross data, so seven of the
original questions had to be replaced. Questions about common words in titles
and plots were also removed due to the difficulties of setting up full text
search and the time constraints of this project.

 1. Highest grossing movies by year
 2. Highest grossing movies by country of origin
 3. Highest grossing movies by country of origin by year
 4. Highest grossing actors of all time
 5. Highest grossing actors by year
 6. Common words in movie titles by IMDB score
 7. Common words in plot by IMDB score
 8. Common words in movie titles by box office gross
 9. Highest grossing genre combinations
 10. Highest grossing genre combinations by year

** Raw Data

Raw data was exported using the following command:

#+BEGIN_SRC shell
pg_dump jeremiah -a -f data.sql -n public -T pokemon -T quick_move
#+END_SRC

The data is available in [[file:raw_data/data.sql][raw_data/data.sql]].

This data dump is provided since there is a large amount of data present (over
9,000 movies) and providing this data as a text dump would be too lengthy to
encode in this document.
